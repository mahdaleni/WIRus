


    nutzer -> platform zu app verbinden -> platform anfrage nutzer verifizierung -> platform verifiziere email
    nutzer -> bestätigung anfordern -> email an empfänger -> bestätigungslink


    user {
        email
        name
        punkte
        aktionen
        platforms
    }

    platforms {
        id
        name
        api token
    }

    aktionen {
        id
        platform
        user
        empfänger
        titel
        beschreibung
        punkte
        completed (true/false)
        time
        confirmable (true/false)
    }

    nutzer
        -> get info
        -> set info
       // -> connect platform
        -> request aktion bestätigung
        -> delete aktion

    platform
        -> verify user
        -> erstelle aktion
        -> update aktion

    


    TODO

    - platform authentication with access token
    - user points calculation
    - platform descriptions
    - confirm email design


    


    Platform integration
        - platform profile setup
        - access token
        - platform link
        - use of own authentication provider

    app
        - user authentication (email, password)
        - user profile data
        - user activity data
        - platform list
        - community score info




authentication

- app uses firebase sdk for authentication
- app can request user specific api endpoints using the firebase token
- platform link as functions redirect with custom jwt
- platform can verify jwt either itself or via api endpoint
- platform can request platform&user specific api endpoints using the custom jwt + platform specific api token
- platform can request platform specific api endpoints using the platform specific api token

STATELESS

1. OPEN FROM APP
- app goes to platform redirection endpoint    (/goto)
- backend creates redirection response
    1. platform not connected:
        - backend creates user id token for platform
    2. platform connected:
        - backend creates user access token for platform including stored platform user details
- REDIRECTION

2. LOGIN ON PLATFORM VIA WIRUS
- platform redirects to wirus login website     (/login)   
- backend creates redirection response
    1. platform not connected:
        - backend creates user id token for platform
    2. platform connected:
        - backend creates user access token for platform including stored platform user details
- REDIRECTION

3. LOGIN ON PLATFORM NORMALLY WITH LINKED ACCOUNT
- user logges into platform
- platform requests access token via platform user token to server (/token)
- server checks all
- server creates and responds with user access token

4. USER VISITS PLATFORM STILL LOGGED in
- platform requests access token via platform user token to server        (/token)
- server checks all
- server creates and responds with user access token

REDIRECTION
- platform website
    1. access token exists
        - platform checks token and logs in user
    2. id token, auth method: app
        a: user chooses new account: 
            - platform creates new account
            - platform requests access token via platform user token (/token)
            - server checks all
            - server creates platform connection to user
            - server creates and responds with user access token
        b: user chooses existing account:
            - user logs into platform
            - platform requests access token via platform user token (/token)
            - server checks all
            - server creates platform connection to user
            - server creates and responds with user access token
    3. id token, auth method: signin
        - platform creates new account
        - platform requests access token via platform user token (/token)
        - server checks all
        - server creates platform connection to user
        - server creates and responds with user access token










Platform
- redirect_url
- public_key
- logo
- name
- url


User
- name
- platforms:
    [id]: {
        subject
    }